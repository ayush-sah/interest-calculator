{"ast":null,"code":"/**\n * Calculate simple interest\n * Formula: A = P(1 + rt)\n * @param {number} principal - The principal amount\n * @param {number} monthlyRate - Monthly interest rate as percentage\n * @param {number} months - Time period in months\n * @returns {number} Final amount after simple interest\n */\nexport const calculateSimpleInterest = (principal, monthlyRate, months) => {\n  if (principal <= 0 || monthlyRate < 0 || months <= 0) {\n    throw new Error(\"Invalid input values for simple interest calculation\");\n  }\n  const rate = monthlyRate / 100;\n  return principal * (1 + rate * months);\n};\n\n/**\n * Calculate compound interest\n * Formula: A = P(1 + r/n)^(nt)\n * @param {number} principal - The principal amount\n * @param {number} monthlyRate - Monthly interest rate as percentage\n * @param {number} months - Time period in months\n * @param {string} frequency - Compounding frequency ('monthly' or 'yearly')\n * @returns {number} Final amount after compound interest\n */\nexport const calculateCompoundInterest = (principal, monthlyRate, months, frequency) => {\n  if (principal <= 0 || monthlyRate < 0 || months <= 0) {\n    throw new Error(\"Invalid input values for compound interest calculation\");\n  }\n\n  // Convert monthly rate to annual rate\n  const annualRate = monthlyRate / 100 * 12;\n\n  // Determine compounding frequency\n  const compoundingFrequency = frequency === \"monthly\" ? 12 : 1;\n\n  // Convert months to years\n  const years = months / 12;\n\n  // Apply compound interest formula\n  return principal * Math.pow(1 + annualRate / compoundingFrequency, compoundingFrequency * years);\n};\n\n/**\n * Format currency for display\n * @param {number} amount - Amount to format\n * @param {string} locale - Locale for formatting (default: 'en-IN')\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = (amount, locale = \"en-IN\", currency = \"INR\") => {\n  return new Intl.NumberFormat(locale, {\n    style: \"currency\",\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n/**\n * Validate input values\n * @param {number} amount - Principal amount\n * @param {number} rate - Interest rate\n * @param {number} period - Time period\n * @returns {Object} Validation result with isValid flag and errors array\n */\nexport const validateInputs = (amount, rate, period) => {\n  const errors = [];\n  if (!amount || amount <= 0) {\n    errors.push(\"Amount must be greater than 0\");\n  }\n  if (amount > 10000000) {\n    errors.push(\"Amount cannot exceed 10,000,000\");\n  }\n  if (rate < 0) {\n    errors.push(\"Interest rate cannot be negative\");\n  }\n  if (rate > 100) {\n    errors.push(\"Interest rate cannot exceed 100%\");\n  }\n  if (!period || period <= 0) {\n    errors.push(\"Period must be greater than 0\");\n  }\n  if (period > 1200) {\n    errors.push(\"Period cannot exceed 1200 months\");\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["calculateSimpleInterest","principal","monthlyRate","months","Error","rate","calculateCompoundInterest","frequency","annualRate","compoundingFrequency","years","Math","pow","formatCurrency","amount","locale","currency","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","validateInputs","period","errors","push","isValid","length"],"sources":["/Users/ayush.sah/Documents/Personal/interest-calculator-1/src/utils/calculations.js"],"sourcesContent":["/**\n * Calculate simple interest\n * Formula: A = P(1 + rt)\n * @param {number} principal - The principal amount\n * @param {number} monthlyRate - Monthly interest rate as percentage\n * @param {number} months - Time period in months\n * @returns {number} Final amount after simple interest\n */\nexport const calculateSimpleInterest = (principal, monthlyRate, months) => {\n  if (principal <= 0 || monthlyRate < 0 || months <= 0) {\n    throw new Error(\"Invalid input values for simple interest calculation\");\n  }\n\n  const rate = monthlyRate / 100;\n  return principal * (1 + rate * months);\n};\n\n/**\n * Calculate compound interest\n * Formula: A = P(1 + r/n)^(nt)\n * @param {number} principal - The principal amount\n * @param {number} monthlyRate - Monthly interest rate as percentage\n * @param {number} months - Time period in months\n * @param {string} frequency - Compounding frequency ('monthly' or 'yearly')\n * @returns {number} Final amount after compound interest\n */\nexport const calculateCompoundInterest = (\n  principal,\n  monthlyRate,\n  months,\n  frequency\n) => {\n  if (principal <= 0 || monthlyRate < 0 || months <= 0) {\n    throw new Error(\"Invalid input values for compound interest calculation\");\n  }\n\n  // Convert monthly rate to annual rate\n  const annualRate = (monthlyRate / 100) * 12;\n\n  // Determine compounding frequency\n  const compoundingFrequency = frequency === \"monthly\" ? 12 : 1;\n\n  // Convert months to years\n  const years = months / 12;\n\n  // Apply compound interest formula\n  return (\n    principal *\n    Math.pow(\n      1 + annualRate / compoundingFrequency,\n      compoundingFrequency * years\n    )\n  );\n};\n\n/**\n * Format currency for display\n * @param {number} amount - Amount to format\n * @param {string} locale - Locale for formatting (default: 'en-IN')\n * @param {string} currency - Currency code (default: 'INR')\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = (amount, locale = \"en-IN\", currency = \"INR\") => {\n  return new Intl.NumberFormat(locale, {\n    style: \"currency\",\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\n/**\n * Validate input values\n * @param {number} amount - Principal amount\n * @param {number} rate - Interest rate\n * @param {number} period - Time period\n * @returns {Object} Validation result with isValid flag and errors array\n */\nexport const validateInputs = (amount, rate, period) => {\n  const errors = [];\n\n  if (!amount || amount <= 0) {\n    errors.push(\"Amount must be greater than 0\");\n  }\n\n  if (amount > 10000000) {\n    errors.push(\"Amount cannot exceed 10,000,000\");\n  }\n\n  if (rate < 0) {\n    errors.push(\"Interest rate cannot be negative\");\n  }\n\n  if (rate > 100) {\n    errors.push(\"Interest rate cannot exceed 100%\");\n  }\n\n  if (!period || period <= 0) {\n    errors.push(\"Period must be greater than 0\");\n  }\n\n  if (period > 1200) {\n    errors.push(\"Period cannot exceed 1200 months\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAGA,CAACC,SAAS,EAAEC,WAAW,EAAEC,MAAM,KAAK;EACzE,IAAIF,SAAS,IAAI,CAAC,IAAIC,WAAW,GAAG,CAAC,IAAIC,MAAM,IAAI,CAAC,EAAE;IACpD,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,MAAMC,IAAI,GAAGH,WAAW,GAAG,GAAG;EAC9B,OAAOD,SAAS,IAAI,CAAC,GAAGI,IAAI,GAAGF,MAAM,CAAC;AACxC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,yBAAyB,GAAGA,CACvCL,SAAS,EACTC,WAAW,EACXC,MAAM,EACNI,SAAS,KACN;EACH,IAAIN,SAAS,IAAI,CAAC,IAAIC,WAAW,GAAG,CAAC,IAAIC,MAAM,IAAI,CAAC,EAAE;IACpD,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC3E;;EAEA;EACA,MAAMI,UAAU,GAAIN,WAAW,GAAG,GAAG,GAAI,EAAE;;EAE3C;EACA,MAAMO,oBAAoB,GAAGF,SAAS,KAAK,SAAS,GAAG,EAAE,GAAG,CAAC;;EAE7D;EACA,MAAMG,KAAK,GAAGP,MAAM,GAAG,EAAE;;EAEzB;EACA,OACEF,SAAS,GACTU,IAAI,CAACC,GAAG,CACN,CAAC,GAAGJ,UAAU,GAAGC,oBAAoB,EACrCA,oBAAoB,GAAGC,KACzB,CAAC;AAEL,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,cAAc,GAAGA,CAACC,MAAM,EAAEC,MAAM,GAAG,OAAO,EAAEC,QAAQ,GAAG,KAAK,KAAK;EAC5E,OAAO,IAAIC,IAAI,CAACC,YAAY,CAACH,MAAM,EAAE;IACnCI,KAAK,EAAE,UAAU;IACjBH,QAAQ,EAAEA,QAAQ;IAClBI,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACR,MAAM,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,cAAc,GAAGA,CAACT,MAAM,EAAET,IAAI,EAAEmB,MAAM,KAAK;EACtD,MAAMC,MAAM,GAAG,EAAE;EAEjB,IAAI,CAACX,MAAM,IAAIA,MAAM,IAAI,CAAC,EAAE;IAC1BW,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9C;EAEA,IAAIZ,MAAM,GAAG,QAAQ,EAAE;IACrBW,MAAM,CAACC,IAAI,CAAC,iCAAiC,CAAC;EAChD;EAEA,IAAIrB,IAAI,GAAG,CAAC,EAAE;IACZoB,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,IAAIrB,IAAI,GAAG,GAAG,EAAE;IACdoB,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,IAAI,CAACF,MAAM,IAAIA,MAAM,IAAI,CAAC,EAAE;IAC1BC,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9C;EAEA,IAAIF,MAAM,GAAG,IAAI,EAAE;IACjBC,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,OAAO;IACLC,OAAO,EAAEF,MAAM,CAACG,MAAM,KAAK,CAAC;IAC5BH;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}