{"ast":null,"code":"/**\n * Calculate simple interest\n * Formula: A = P(1 + rt)\n * @param {number} principal - Principal amount\n * @param {number} monthlyRate - Monthly interest rate (as percentage)\n * @param {number} timeInMonths - Time period in months\n * @returns {number} Final amount\n */\nexport const calculateSimpleInterest = (principal, monthlyRate, timeInMonths) => {\n  if (principal <= 0 || monthlyRate < 0 || timeInMonths <= 0) {\n    throw new Error(\"Invalid input values for simple interest calculation\");\n  }\n  const rate = monthlyRate / 100; // Convert percentage to decimal\n  return principal * (1 + rate * timeInMonths);\n};\n\n/**\n * Calculate compound interest\n * Formula: A = P(1 + r/n)^(nt)\n * @param {number} principal - Principal amount\n * @param {number} monthlyRate - Monthly interest rate (as percentage)\n * @param {number} timeInMonths - Time period in months\n * @param {string} frequency - Compounding frequency ('monthly' or 'yearly')\n * @returns {number} Final amount\n */\nexport const calculateCompoundInterest = (principal, monthlyRate, timeInMonths, frequency) => {\n  if (principal <= 0 || monthlyRate < 0 || timeInMonths <= 0) {\n    throw new Error(\"Invalid input values for compound interest calculation\");\n  }\n  const monthlyRateDecimal = monthlyRate / 100;\n  const annualRate = monthlyRateDecimal * 12; // Convert monthly rate to annual\n  const timeInYears = timeInMonths / 12;\n  let n; // Compounding frequency per year\n  if (frequency === \"monthly\") {\n    n = 12;\n  } else if (frequency === \"yearly\") {\n    n = 1;\n  } else {\n    throw new Error(\"Invalid compounding frequency\");\n  }\n  return principal * Math.pow(1 + annualRate / n, n * timeInYears);\n};\n\n/**\n * Format currency in Indian Rupee format\n * @param {number} amount - Amount to format\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = amount => {\n  return new Intl.NumberFormat(\"en-IN\", {\n    style: \"currency\",\n    currency: \"INR\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n/**\n * Validate input values\n * @param {number} amount - Principal amount\n * @param {number} rate - Interest rate\n * @param {number} period - Time period\n * @returns {object} Validation result\n */\nexport const validateInputs = (amount, rate, period) => {\n  const errors = [];\n  if (!amount || amount <= 0) {\n    errors.push(\"Amount must be greater than 0\");\n  }\n  if (amount > 10000000) {\n    errors.push(\"Amount cannot exceed ₹10,000,000\");\n  }\n  if (rate < 0) {\n    errors.push(\"Interest rate cannot be negative\");\n  }\n  if (rate > 100) {\n    errors.push(\"Interest rate cannot exceed 100%\");\n  }\n  if (!period || period <= 0) {\n    errors.push(\"Period must be greater than 0\");\n  }\n  if (period > 1200) {\n    errors.push(\"Period cannot exceed 1200 months\");\n  }\n  return {\n    isValid: errors.length === 0,\n    errors\n  };\n};","map":{"version":3,"names":["calculateSimpleInterest","principal","monthlyRate","timeInMonths","Error","rate","calculateCompoundInterest","frequency","monthlyRateDecimal","annualRate","timeInYears","n","Math","pow","formatCurrency","amount","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","format","validateInputs","period","errors","push","isValid","length"],"sources":["/Users/ayush.sah/Documents/Personal/interest-calculator-1/src/utils/calculations.js"],"sourcesContent":["/**\n * Calculate simple interest\n * Formula: A = P(1 + rt)\n * @param {number} principal - Principal amount\n * @param {number} monthlyRate - Monthly interest rate (as percentage)\n * @param {number} timeInMonths - Time period in months\n * @returns {number} Final amount\n */\nexport const calculateSimpleInterest = (\n  principal,\n  monthlyRate,\n  timeInMonths\n) => {\n  if (principal <= 0 || monthlyRate < 0 || timeInMonths <= 0) {\n    throw new Error(\"Invalid input values for simple interest calculation\");\n  }\n\n  const rate = monthlyRate / 100; // Convert percentage to decimal\n  return principal * (1 + rate * timeInMonths);\n};\n\n/**\n * Calculate compound interest\n * Formula: A = P(1 + r/n)^(nt)\n * @param {number} principal - Principal amount\n * @param {number} monthlyRate - Monthly interest rate (as percentage)\n * @param {number} timeInMonths - Time period in months\n * @param {string} frequency - Compounding frequency ('monthly' or 'yearly')\n * @returns {number} Final amount\n */\nexport const calculateCompoundInterest = (\n  principal,\n  monthlyRate,\n  timeInMonths,\n  frequency\n) => {\n  if (principal <= 0 || monthlyRate < 0 || timeInMonths <= 0) {\n    throw new Error(\"Invalid input values for compound interest calculation\");\n  }\n\n  const monthlyRateDecimal = monthlyRate / 100;\n  const annualRate = monthlyRateDecimal * 12; // Convert monthly rate to annual\n  const timeInYears = timeInMonths / 12;\n\n  let n; // Compounding frequency per year\n  if (frequency === \"monthly\") {\n    n = 12;\n  } else if (frequency === \"yearly\") {\n    n = 1;\n  } else {\n    throw new Error(\"Invalid compounding frequency\");\n  }\n\n  return principal * Math.pow(1 + annualRate / n, n * timeInYears);\n};\n\n/**\n * Format currency in Indian Rupee format\n * @param {number} amount - Amount to format\n * @returns {string} Formatted currency string\n */\nexport const formatCurrency = (amount) => {\n  return new Intl.NumberFormat(\"en-IN\", {\n    style: \"currency\",\n    currency: \"INR\",\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  }).format(amount);\n};\n\n/**\n * Validate input values\n * @param {number} amount - Principal amount\n * @param {number} rate - Interest rate\n * @param {number} period - Time period\n * @returns {object} Validation result\n */\nexport const validateInputs = (amount, rate, period) => {\n  const errors = [];\n\n  if (!amount || amount <= 0) {\n    errors.push(\"Amount must be greater than 0\");\n  }\n\n  if (amount > 10000000) {\n    errors.push(\"Amount cannot exceed ₹10,000,000\");\n  }\n\n  if (rate < 0) {\n    errors.push(\"Interest rate cannot be negative\");\n  }\n\n  if (rate > 100) {\n    errors.push(\"Interest rate cannot exceed 100%\");\n  }\n\n  if (!period || period <= 0) {\n    errors.push(\"Period must be greater than 0\");\n  }\n\n  if (period > 1200) {\n    errors.push(\"Period cannot exceed 1200 months\");\n  }\n\n  return {\n    isValid: errors.length === 0,\n    errors,\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAGA,CACrCC,SAAS,EACTC,WAAW,EACXC,YAAY,KACT;EACH,IAAIF,SAAS,IAAI,CAAC,IAAIC,WAAW,GAAG,CAAC,IAAIC,YAAY,IAAI,CAAC,EAAE;IAC1D,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;EACzE;EAEA,MAAMC,IAAI,GAAGH,WAAW,GAAG,GAAG,CAAC,CAAC;EAChC,OAAOD,SAAS,IAAI,CAAC,GAAGI,IAAI,GAAGF,YAAY,CAAC;AAC9C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,yBAAyB,GAAGA,CACvCL,SAAS,EACTC,WAAW,EACXC,YAAY,EACZI,SAAS,KACN;EACH,IAAIN,SAAS,IAAI,CAAC,IAAIC,WAAW,GAAG,CAAC,IAAIC,YAAY,IAAI,CAAC,EAAE;IAC1D,MAAM,IAAIC,KAAK,CAAC,wDAAwD,CAAC;EAC3E;EAEA,MAAMI,kBAAkB,GAAGN,WAAW,GAAG,GAAG;EAC5C,MAAMO,UAAU,GAAGD,kBAAkB,GAAG,EAAE,CAAC,CAAC;EAC5C,MAAME,WAAW,GAAGP,YAAY,GAAG,EAAE;EAErC,IAAIQ,CAAC,CAAC,CAAC;EACP,IAAIJ,SAAS,KAAK,SAAS,EAAE;IAC3BI,CAAC,GAAG,EAAE;EACR,CAAC,MAAM,IAAIJ,SAAS,KAAK,QAAQ,EAAE;IACjCI,CAAC,GAAG,CAAC;EACP,CAAC,MAAM;IACL,MAAM,IAAIP,KAAK,CAAC,+BAA+B,CAAC;EAClD;EAEA,OAAOH,SAAS,GAAGW,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGJ,UAAU,GAAGE,CAAC,EAAEA,CAAC,GAAGD,WAAW,CAAC;AAClE,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,cAAc,GAAIC,MAAM,IAAK;EACxC,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAE,KAAK;IACfC,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACP,MAAM,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,cAAc,GAAGA,CAACR,MAAM,EAAEV,IAAI,EAAEmB,MAAM,KAAK;EACtD,MAAMC,MAAM,GAAG,EAAE;EAEjB,IAAI,CAACV,MAAM,IAAIA,MAAM,IAAI,CAAC,EAAE;IAC1BU,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9C;EAEA,IAAIX,MAAM,GAAG,QAAQ,EAAE;IACrBU,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,IAAIrB,IAAI,GAAG,CAAC,EAAE;IACZoB,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,IAAIrB,IAAI,GAAG,GAAG,EAAE;IACdoB,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,IAAI,CAACF,MAAM,IAAIA,MAAM,IAAI,CAAC,EAAE;IAC1BC,MAAM,CAACC,IAAI,CAAC,+BAA+B,CAAC;EAC9C;EAEA,IAAIF,MAAM,GAAG,IAAI,EAAE;IACjBC,MAAM,CAACC,IAAI,CAAC,kCAAkC,CAAC;EACjD;EAEA,OAAO;IACLC,OAAO,EAAEF,MAAM,CAACG,MAAM,KAAK,CAAC;IAC5BH;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}